#! /usr/bin/env bash

set -eu -o pipefail
shopt -s nullglob

tmpfile=$(mktemp)

error_exit()
{
    echo >&2 "*** $0:" "$@"
    regular_exit=true
    exit 1
}

exit_trap()
{
    local lc="$BASH_COMMAND" rc=$?
    test "$rc" -eq 0 || test -n "${regular_exit:-}" || echo "*** error $rc: $lc"
    test ! -f "$tmpfile" || rm -f "$tmpfile"
}

trap exit_trap EXIT

cd "$(dirname "$0")"/..

git -C hackage checkout -q hackage
git -C hackage pull -q &
cabal -v0 update &
parallel "cd {} && osc update >/dev/null" ::: _build/lts-* &
wait

msg=$(git -C hackage log -1 | sed -n -e 's/ *Update from //p')
if [ -n "$(git status --porcelain hackage)" ]; then
   git commit -q -m "$msg" hackage
fi

parallel "cd {} && osc status" ::: _build/lts-* >"$tmpfile"
if [ -s "$tmpfile" ]; then
    error_exit osc checkouts contain uncommitted changes
fi

cd tools/cabal2obs
hpack --silent
cabal -v0 new-run cabal2obs -- -C ../.. --no-progress --lint update
cd ../..
for n in $(git status --porcelain tools/cabal2obs/Config/LTS* | sed -e 's/^ M //'); do
    v=$(basename $(dirname "$n"))
    v=${v##LTS}
    v=$(head -n1 "_build/cabal-lts-$v.config" | sed -e 's,.*/,,')
    git commit -q -m "update to $v" "$n"
done

git status --porcelain >"$tmpfile"
if [ -s "$tmpfile" ]; then
    error_exit git repository has uncommitted changes
fi

cd tools/cabal2obs
cabal -v0 new-run cabal2obs -- -C ../.. --no-progress --lint
cd ../..

parallel "cd {} && ../../tools/commit >/dev/null" ::: _build/lts-*
