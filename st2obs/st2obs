#!/usr/bin/zsh -f
# vim: ft=zsh sw=2 sts=2 et fdm=marker cms=\ #\ %s

: ${script_name:=${0:t}}
: ${obs_dir:=$(pwd)}
: ${work_temp:=$(mktemp -d)}
: ${conf_dir:=${XDG_CONFIG_HOME}/st2obs}
declare -r spec_dir=${work_temp}/specdir
mkdir ${spec_dir} || eerror 10 "Failed to create spec directory"

#TODO test functions
: ${test_cabal:=}
: ${is_test:=0}

# version = lts|nightly|lts-x.y|nightly-yyyy-mm-dd
#: ${version:=lts}


function ewarn() {
  print ${1} ${2} >&2
  return ${1}
}

function eerror() {
  print ${1} ${2} >&2
  exit ${1}
}

function clean_cabal_file() {
  pushd ${work_temp}
  cp cabal.config cabal.work
  sed -i -r 's/^\s+|^\w+:\s//g;
  s/,$//g;
  s/==//g;
  /^--/d;
  /installed$/d' cabal.work
  popd
}

# argument is ${version}
function get_cabal_config() {
  pushd ${work_temp}
  wget http://www.stackage.org/${1}/cabal.config \
  || eerror 10 "Couldn't download cabal.config from stackage"
  popd
}

function create_spec() {
  cblrpm spec ${2} ${1} || ewarn 100 "Spec ${1} isn't created."
}

function mk_package() {
  #TODO test part
  wget $(get_source ${1}.spec) || ewarn 110 "tarball for ${1} isn't downloaded"
  pushd ..
  osc add ${1}
  popd
  osc vc -m "${1} generated by st2obs scritpt"
  osc ar
}

function mk_update() {
  #TODO test part
  rm *.tar.gz || ewarn 120 "old tarball for ${1} isn't removed"
  wget $(get_source ${1}.spec) || ewarn 110 "tarball for ${1} isn't downloaded"
  osc vc -m "package ${1} updated by st2obs"
  osc ar
}

# parametr is conf_dir
function read_excluded() {
  local l
  while read l; do
    excluded=(${excluded} ${l})
  done < ${conf_dir}/dont_*.conf
}

#parametr is conf_dir
function read_binary() {
  local binary_file
  local l
  binary_file=${1}/binary.conf
  while read l; do
    a_binary=(${a_binary} ${l})
  done < ${binary_file}
}


function spec_loop() {
  local cabal_file=${work_temp}/cabal.work
  local pkg
  local ver
  pushd ${spec_dir}
  while read pkg ver; do
    if [[ ! ${excluded[(r)${pkg}]} ]]; then
      if [[ ${a_binary[(r)${pkg}]} ]]; then
        print "create binary ${pkg}-${ver}"
        create_spec ${pkg}-${ver} -b
      else
        print "create ${pkg}-${ver}"
        create_spec ${pkg}-${ver}
      fi
    fi
  done < ${cabal_file}
  popd
}

function main_loop() {
  pushd ${spec_dir}
  local spec
  local name
  for spec in *.spec; do
    name=${spec/\.spec/}
    echo "spec is $spec"
    if mkdir ${obs_dir}/${name} &> /dev/null ; then
      mv ${spec} ${obs_dir}/${name}/
      pushd ${obs_dir}/${name}
      mk_package ${name}
      popd
    else
      if ! cmp -s ${spec} ${obs_dir}/${name}/${spec} ; then
        mv ${spec} ${obs_dir}/${name}/
        pushd ${obs_dir}/${name}
        mk_update ${name}
        popd
      fi
    fi
  done
  popd
}

function repo_commit() {
  pushd ${obs_dir}
  osc ci -m "commit st2obs results" || eerror 20 "osc commit failed"
  popd
}

function temp_cleanup() {
  rm -Rf ${work_temp}
}

function _usage() {
  cat <<- EOL
  USAGE: ${1} version
    where 'version' is  lts | nightly | lts-x.y | nightly-yyyy-mm
  
  mandatory is ran this script in OBS repository or define variable obs_dir
    pointing to OBS repository

  dependecies for this script are cabal-rpm package and get_source python script
  + wget, is written in almost plain zshell
EOL
}  

function main() {
  : ${version:=${1}}
  get_cabal_config ${version}
  clean_cabal_file
  read_excluded ${conf_dir}
  read_binary ${conf_dir}
  spec_loop
  main_loop
  repo_commit
  temp_cleanup
}

while true; do
  case  ${1} in
    lts|lts-?\.?|nightly|nightly-????-??-?? )
      main ${1}
      exit 0
      ;;
    *)
      _usage ${script_name}
      eerror 1 "try again ... bad usage"
      ;;
  esac
done

